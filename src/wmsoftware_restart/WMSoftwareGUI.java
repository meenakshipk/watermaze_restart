/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package wmsoftware_restart;

import ij.io.FileSaver;
import ij.ImagePlus;
import ij.ImageStack;
import ij.gui.OvalRoi;
import ij.gui.Plot;
import ij.gui.PlotWindow;
import ij.gui.Roi;
import ij.measure.CurveFitter;
import ij.measure.Measurements;
import ij.measure.ResultsTable;
import ij.plugin.ZProjector;
import ij.process.FloatProcessor;
import ij.process.ImageProcessor;
import ij.plugin.filter.*;
import ij.plugin.frame.RoiManager;
import ij.process.Blitter;
import java.awt.Component;
import java.awt.Image;
import java.awt.Polygon;
import java.awt.Rectangle;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.Serializable;
import static java.lang.Float.NaN;
import java.util.ArrayList;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import java.util.Arrays;
import java.util.BitSet;
import java.util.Collections;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.NoSuchElementException;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import static javafx.scene.input.KeyCode.K;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

/**
 *
 * @author Meenakshi
 */
public class WMSoftwareGUI extends javax.swing.JFrame {

    private int totalMiceNo;
    private int totalTrialNo;
    private File dir;
    private Component frame;
    private double userBin;
    private int dimX = 240;
    private int dimY = 240;
    private int pX = 175;
    private int pY = 175;

    private HashMap<String, Mouse> dataInput = null;
    private HashMap<String, HashMap<String, Object>> dataOutput = null;

    /**
     * Creates new form WMSoftwareGUI
     */
    public WMSoftwareGUI() {
        initComponents();
        jComboBoxTrialNo.removeAllItems();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jDialog1 = new javax.swing.JDialog();
        jLabel3 = new javax.swing.JLabel();
        buttonGroupPlotGroupDataBy = new javax.swing.ButtonGroup();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jTextFieldTrials = new javax.swing.JTextField();
        jTextFieldTotalMiceNo = new javax.swing.JTextField();
        jButtonSelectFiles = new javax.swing.JButton();
        jComboBoxTrialNo = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        jButtonUploadFiles = new javax.swing.JButton();
        jButtonReadFiles = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableList = new javax.swing.JTable();
        jPanel4 = new javax.swing.JPanel();
        jLabelMaps2 = new javax.swing.JLabel();
        jCheckBoxAcceleration = new javax.swing.JCheckBox();
        jCheckBoxJerk = new javax.swing.JCheckBox();
        jButtonCalculateMeasures = new javax.swing.JButton();
        jCheckBoxVelocity = new javax.swing.JCheckBox();
        jProgressBar1 = new javax.swing.JProgressBar();
        jLabel8 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabelMaps = new javax.swing.JLabel();
        jCheckBoxAlongPt = new javax.swing.JCheckBox();
        jCheckBoxOrthoPt = new javax.swing.JCheckBox();
        jCheckBoxErrVec = new javax.swing.JCheckBox();
        jCheckBoxVecField = new javax.swing.JCheckBox();
        jCheckBoxASCIIvector = new javax.swing.JCheckBox();
        jLabelMaps1 = new javax.swing.JLabel();
        jCheckBoxDivergence = new javax.swing.JCheckBox();
        jCheckBoxCurl = new javax.swing.JCheckBox();
        jCheckBoxGradient = new javax.swing.JCheckBox();
        jButtonGenerateMaps = new javax.swing.JButton();
        jCheckBoxAverageMouseMap = new javax.swing.JCheckBox();
        jCheckBoxHeatMap = new javax.swing.JCheckBox();
        jProgressBar = new javax.swing.JProgressBar();
        jLabel6 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jCheckBoxRDistvRVel = new javax.swing.JCheckBox();
        jCheckBoxRDistvRVelaP = new javax.swing.JCheckBox();
        jCheckBoxRDistvRVelpP = new javax.swing.JCheckBox();
        jCheckBoxRDistvRVelErr = new javax.swing.JCheckBox();
        jLabelPlots = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jTextFieldUserBin = new javax.swing.JTextField();
        jButtonGeneratePlots = new javax.swing.JButton();
        jCheckBoxAverageMousePlot = new javax.swing.JCheckBox();
        jLabel7 = new javax.swing.JLabel();
        jProgressBar2 = new javax.swing.JProgressBar();

        jDialog1.setTitle("Select files");
        jDialog1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jDialog1.setModalityType(java.awt.Dialog.ModalityType.DOCUMENT_MODAL);

        jLabel3.setText("Select files for each trial:");

        javax.swing.GroupLayout jDialog1Layout = new javax.swing.GroupLayout(jDialog1.getContentPane());
        jDialog1.getContentPane().setLayout(jDialog1Layout);
        jDialog1Layout.setHorizontalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDialog1Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(jLabel3)
                .addContainerGap(259, Short.MAX_VALUE))
        );
        jDialog1Layout.setVerticalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDialog1Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(jLabel3)
                .addContainerGap(260, Short.MAX_VALUE))
        );

        jDialog1.getAccessibleContext().setAccessibleParent(jButtonSelectFiles);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Water Maze Software");

        jLabel1.setText("Number of mice per trial:");

        jLabel2.setText("Total number of trials:");

        jButtonSelectFiles.setText("Select Files");
        jButtonSelectFiles.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSelectFilesActionPerformed(evt);
            }
        });

        jComboBoxTrialNo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel4.setText("Trial number:");

        jButtonUploadFiles.setText("Upload Files");
        jButtonUploadFiles.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonUploadFilesActionPerformed(evt);
            }
        });

        jButtonReadFiles.setText("Read Files");
        jButtonReadFiles.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonReadFilesActionPerformed(evt);
            }
        });

        jTableList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Trial", "MouseID", "File"
            }
        ));
        jTableList.setRequestFocusEnabled(false);
        jScrollPane1.setViewportView(jTableList);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBoxTrialNo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonUploadFiles)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonReadFiles)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 582, Short.MAX_VALUE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1)
                                    .addComponent(jLabel2))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(jTextFieldTrials, javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(jTextFieldTotalMiceNo, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jButtonSelectFiles, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addContainerGap())))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jTextFieldTotalMiceNo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jTextFieldTrials, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButtonSelectFiles)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jComboBoxTrialNo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonUploadFiles)
                    .addComponent(jButtonReadFiles))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(29, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Select Files", jPanel1);

        jLabelMaps2.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabelMaps2.setText("Kinematic Measures:");

        jCheckBoxAcceleration.setText("Acceleration");

        jCheckBoxJerk.setText("Jerk");

        jButtonCalculateMeasures.setText("Calculate");
        jButtonCalculateMeasures.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCalculateMeasuresActionPerformed(evt);
            }
        });

        jCheckBoxVelocity.setText("Velocity");

        jLabel8.setText("Progress Bar:");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jProgressBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jCheckBoxVelocity)
                                    .addComponent(jLabelMaps2)
                                    .addComponent(jCheckBoxAcceleration)
                                    .addComponent(jCheckBoxJerk)
                                    .addComponent(jButtonCalculateMeasures))
                                .addGap(142, 183, Short.MAX_VALUE)))
                        .addGap(292, 292, 292))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabelMaps2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxVelocity)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxAcceleration)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxJerk)
                .addGap(106, 106, 106)
                .addComponent(jButtonCalculateMeasures)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 28, Short.MAX_VALUE)
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Calculate Measure", jPanel4);

        jLabelMaps.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabelMaps.setText("Spatial property:");

        jCheckBoxAlongPt.setText("Along platform");

        jCheckBoxOrthoPt.setText("Orthogonal to platform");

        jCheckBoxErrVec.setText("Error vector");

        jCheckBoxVecField.setText("Vector field");

        jCheckBoxASCIIvector.setText("Vector field map");

        jLabelMaps1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabelMaps1.setText("Maps:");

        jCheckBoxDivergence.setText("Divergence map");

        jCheckBoxCurl.setText("Curl map");

        jCheckBoxGradient.setText("Gradient map");

        jButtonGenerateMaps.setText("Generate Maps");
        jButtonGenerateMaps.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonGenerateMapsActionPerformed(evt);
            }
        });

        jCheckBoxAverageMouseMap.setText("Average Mouse");

        jCheckBoxHeatMap.setText("Heat map");

        jLabel6.setText("Progress Bar:");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jProgressBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jCheckBoxVecField)
                                    .addComponent(jLabelMaps)
                                    .addComponent(jCheckBoxAlongPt)
                                    .addComponent(jCheckBoxOrthoPt)
                                    .addComponent(jCheckBoxErrVec))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 60, Short.MAX_VALUE)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jCheckBoxAverageMouseMap)
                                    .addComponent(jCheckBoxASCIIvector)
                                    .addComponent(jLabelMaps1)
                                    .addComponent(jCheckBoxGradient)
                                    .addComponent(jCheckBoxDivergence)
                                    .addComponent(jCheckBoxCurl)
                                    .addComponent(jButtonGenerateMaps)
                                    .addComponent(jCheckBoxHeatMap))))
                        .addGap(292, 292, 292))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabelMaps)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jCheckBoxVecField)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jCheckBoxAlongPt)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jCheckBoxOrthoPt)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jCheckBoxErrVec)
                        .addGap(23, 23, 23))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabelMaps1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jCheckBoxASCIIvector)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jCheckBoxDivergence)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jCheckBoxCurl)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jCheckBoxHeatMap)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jCheckBoxGradient)))
                .addGap(35, 35, 35)
                .addComponent(jCheckBoxAverageMouseMap)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonGenerateMaps)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 28, Short.MAX_VALUE)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Generate Maps", jPanel2);

        jCheckBoxRDistvRVel.setText("R-Distance vs R-Velocity");

        jCheckBoxRDistvRVelaP.setText("R-Distance vs R-Velocity along platform");

        jCheckBoxRDistvRVelpP.setText("R-Distance vs R-Velocity perpendicular to platform");

        jCheckBoxRDistvRVelErr.setText("R-Distance vs R-Velocity Errors");

        jLabelPlots.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabelPlots.setText("Plots:");

        jLabel5.setText("Enter bin width in X:");

        jTextFieldUserBin.setText("0.00");

        jButtonGeneratePlots.setText("Generate Plots");
        jButtonGeneratePlots.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonGeneratePlotsActionPerformed(evt);
            }
        });

        jCheckBoxAverageMousePlot.setText("Average Mouse");

        jLabel7.setText("Progress Bar:");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jCheckBoxAverageMousePlot)
                    .addComponent(jLabelPlots)
                    .addComponent(jCheckBoxRDistvRVelErr)
                    .addComponent(jCheckBoxRDistvRVelpP)
                    .addComponent(jCheckBoxRDistvRVelaP)
                    .addComponent(jCheckBoxRDistvRVel)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextFieldUserBin, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel7)
                    .addComponent(jButtonGeneratePlots)
                    .addComponent(jProgressBar2, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(292, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jTextFieldUserBin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabelPlots)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxRDistvRVel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxRDistvRVelaP)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxRDistvRVelpP)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxRDistvRVelErr)
                .addGap(17, 17, 17)
                .addComponent(jCheckBoxAverageMousePlot)
                .addGap(18, 18, 18)
                .addComponent(jButtonGeneratePlots)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jProgressBar2, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Generate Plots", jPanel3);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonReadFilesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonReadFilesActionPerformed
        //store file in dataInput hashmap
        dataInput = new HashMap<>();
        for (int r = 0; r < jTableList.getRowCount(); r++) {
            String trial = jTableList.getValueAt(r, 0).toString();
            String mouse = jTableList.getValueAt(r, 1).toString();
            File file = new File(jTableList.getValueAt(r, 2).toString());
            String key = trial + mouse;
            dataInput.put(key, new Mouse(trial, mouse, file));
        }
        //print dialog box
        JOptionPane.showMessageDialog(frame, "Files read.", "Task completed", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_jButtonReadFilesActionPerformed

    private void jButtonUploadFilesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonUploadFilesActionPerformed
        //choose multiple files
        JFileChooser Fc = new JFileChooser();
        Fc.setMultiSelectionEnabled(true);
        Fc.showOpenDialog(this);
        int trial = jComboBoxTrialNo.getSelectedIndex();
        if (totalMiceNo != Fc.getSelectedFiles().length) {
            JOptionPane.showMessageDialog(frame, "Number of files selected does not match number of mice.", "ERROR", JOptionPane.ERROR_MESSAGE);
        } else {
            //update table
            File[] files = Fc.getSelectedFiles();
            for (int mouse = 0; mouse < totalMiceNo; mouse++) {
                int row = (trial * totalMiceNo) + mouse;
                jTableList.setValueAt("T" + String.format("%02d", trial), row, 0);
                jTableList.setValueAt("M" + String.format("%02d", mouse), row, 1);
                jTableList.setValueAt(files[mouse].getAbsolutePath(), row, 2);
            }
        }
    }//GEN-LAST:event_jButtonUploadFilesActionPerformed

    private void jButtonSelectFilesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSelectFilesActionPerformed
        jComboBoxTrialNo.removeAllItems();
        try {
            totalTrialNo = Integer.parseInt(jTextFieldTrials.getText());
            totalMiceNo = Integer.parseInt(jTextFieldTotalMiceNo.getText());
            if (totalTrialNo == 0 || totalMiceNo == 0) {
                JOptionPane.showMessageDialog(frame, "Enter valid number.", "ERROR", JOptionPane.ERROR_MESSAGE);
                return;
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(frame, "Enter valid number.", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }
        //create checkbox with total trial no.
        for (int i = 0; i < totalTrialNo; i++) {
            jComboBoxTrialNo.addItem(Integer.toString(i + 1));
        }
        //create table
        DefaultTableModel dtm = (DefaultTableModel) jTableList.getModel();
        dtm.setRowCount(totalTrialNo * totalMiceNo);
    }//GEN-LAST:event_jButtonSelectFilesActionPerformed

    private void jButtonGenerateMapsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonGenerateMapsActionPerformed
        String taskLog = "";
        //Select directory to store files
        JFileChooser Fc = new JFileChooser();
        Fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        Fc.showOpenDialog(this);
        dir = Fc.getSelectedFile();

        //BitSet for spatial properties
        BitSet spatialProperties = new BitSet(4);
        spatialProperties.set(0, jCheckBoxVecField.isSelected());
        spatialProperties.set(1, jCheckBoxErrVec.isSelected());
        spatialProperties.set(2, jCheckBoxAlongPt.isSelected());
        spatialProperties.set(3, jCheckBoxOrthoPt.isSelected());

        //BitSet for user selected output file type
        BitSet maps = new BitSet(5);
        maps.set(0, jCheckBoxASCIIvector.isSelected());
        maps.set(1, jCheckBoxDivergence.isSelected());
        maps.set(2, jCheckBoxCurl.isSelected());
        maps.set(3, jCheckBoxHeatMap.isSelected());
        maps.set(4, jCheckBoxGradient.isSelected());

        //BitSet logic for output
        BitSet bs = null;
        Set<String> keySetKM = null;
        Iterator<HashMap.Entry<String, Mouse>> iterData = dataInput.entrySet().iterator();
        while (iterData.hasNext()) {
            HashMap.Entry<String, Mouse> pair = iterData.next();
            Mouse mouse = pair.getValue();
            HashMap<String, KinematicMeasures> mouseKM = mouse.getKinematicMeasures();
            keySetKM = mouseKM.keySet(); // use later?
            Iterator<HashMap.Entry<String, KinematicMeasures>> iterKM = mouseKM.entrySet().iterator();
            File saveDir = null;
            while (iterKM.hasNext()) {
                HashMap.Entry<String, KinematicMeasures> pair2 = iterKM.next();
                KinematicMeasures kM = pair2.getValue();
                DataTrace_ver1 vectorMeasure = null;
                ArrayList<Double> scalarMeasure = null;
                VectorMaps vectorMap = null;
                ScalarMaps scalarMap = null;
//                Maps map = null;
                String keySP = null;
                for (int i = spatialProperties.nextSetBit(0); i >= 0; i = spatialProperties.nextSetBit(i + 1)) {
                    switch (i) {
                        case 0:
                            vectorMeasure = kM.getMeasure(); //vector measure in bs2 0
                            bs = (BitSet) maps.clone();
                            bs.clear(3, 5);
                            keySP = "vectorfield";
                            break;
                        case 1:
                            vectorMeasure = kM.getMeasureError();//vector error measure in bs2 1
                            bs = (BitSet) maps.clone();
                            bs.clear(3, 5);
                            keySP = "error";
                            break;
                        case 2:
                            scalarMeasure = kM.getMeasureAlongPt(); //alongpt measure in bs2 2
                            bs = (BitSet) maps.clone();
                            bs.clear(0, 3);
                            keySP = "alongPt";
                            break;
                        case 3:
                            scalarMeasure = kM.getMeasureOrthoPt(); //orthopt measure in bs2 3
                            bs = (BitSet) maps.clone();
                            bs.clear(0, 3);
                            keySP = "orthoPt";
                            break;
                    }
                    if (i < 2) {
                        vectorMap = new VectorMaps(mouse.getPosition());
                        vectorMap.setMeasure(vectorMeasure);
                    } else {
                        scalarMap = new ScalarMaps(mouse.getPosition());
                        scalarMap.setMeasure(scalarMeasure);
                    }
                    ImagePlus impResult = null;
                    Maps mapResult = null;
                    String keyMP = "";
                    for (int j = bs.nextSetBit(0); j >= 0; j = bs.nextSetBit(j + 1)) {
                        switch (j) {
                            case 0:
                                impResult = vectorMap.vectorField();
                                mapResult = vectorMap;
                                keyMP = "map";
                                break;
                            case 1:
                                impResult = vectorMap.divergence();
                                mapResult = vectorMap;
                                keyMP = "div";
                                break;
                            case 2:
                                impResult = vectorMap.curl();
                                mapResult = vectorMap;
                                keyMP = "curl";
                                break;
                            case 3:
                                impResult = scalarMap.heatMap();
                                mapResult = scalarMap;
                                keyMP = "hm";
                                break;
                            case 4:
                                impResult = scalarMap.gradient();
                                mapResult = scalarMap;
                                keyMP = "grad";
                                break;
                        }
//                      impResult.show();
                        String keyMouse = pair.getKey();
                        String keyKM = pair2.getKey();
                        String fileName = keyKM + "_" + keySP + "_" + keyMP + "_" + keyMouse;
                        impResult.setTitle(fileName);
                        try {
                            saveDir = new File(dir.getPath() + File.separator + keyKM);
                            saveDir.mkdir();
                            new FileSaver(impResult).saveAsTiff(saveDir + File.separator + impResult.getTitle() + ".tif");
                        } catch (Exception e) {
                            System.out.println("Error saving" + fileName + "file.");
                            System.out.println(e);
                            taskLog += "Error saving" + fileName + "files.\n";
                            System.out.println();
                        }
                        if (j != 0) {
                            mapResult.setMapResults(impResult);
                            HashMap<String, Object> mapResults = mapResult.getMapResults();
                            if (dataOutput == null) {
                                dataOutput = new HashMap<>();
                            }
                            dataOutput.put(keyMouse + keyKM + i + j, mapResults);
                        }
                        if (j == Integer.MAX_VALUE) {
                            break;
                        }
                    }
                    if (i == Integer.MAX_VALUE) {
                        break;
                    }
                }
            }
        }

        //OUTPUT FROM MAPS
        //loop trial
        //collect all mice of a trial in order
        Mouse[] mice = new Mouse[totalMiceNo];
        for (int t = 0; t < totalTrialNo; t++) {
            String trial = "T" + String.format("%02d", t);
            for (HashMap.Entry<String, Mouse> mousepair : dataInput.entrySet()) {
                if (mousepair.getKey().substring(0, 3).matches(trial)) {
                    Mouse mouse = mousepair.getValue();
//                    System.out.println("Check" + mouse.getTrialID() + " " + trial);
                    String id = mouse.getMouseID();
                    int m = Integer.valueOf(id.substring(1, id.length()));
//                    System.out.println("Mouse ID: " + id + " As int: " + m);
                    mice[m] = mousepair.getValue();
                }
            }
            //loop kinematic measures
            for (Iterator<String> it = keySetKM.iterator(); it.hasNext();) {
                String keyKM = it.next();
                //loop spatial properties i
                for (int i = spatialProperties.nextSetBit(0); i >= 0; i = spatialProperties.nextSetBit(i + 1)) {
                    //loop map properties j
                    for (int j = maps.nextSetBit(1); j >= 0; j = maps.nextSetBit(j + 1)) {
                        //loop over 1 - 4 quadrants/zones
                        DataTrace_ver1 RmList = null;
                        String keyM = "";
                        for (int idx = 0; idx < 4; idx++) {
                            RmList = new DataTrace_ver1();
                            DataTrace_ver1 QList = new DataTrace_ver1();
                            DataTrace_ver1 ZList = new DataTrace_ver1();
                            //loop mice        
                            for (int m = 0; m < totalMiceNo; m++) {
                                Mouse mouse = mice[m];
                                keyM = mouse.getTrialID() + mouse.getMouseID() + keyKM + i + j;
                                if (dataOutput.containsKey(keyM)) {
                                    HashMap<String, Object> mapResults = dataOutput.get(keyM);

                                    //Rm - calculated only once
                                    if (RmList == null) {
                                        OrdXYData Rm = (OrdXYData) mapResults.get("Rm");
                                        RmList.add(Rm);
                                    }
                                    //Quad
                                    DataTrace_ver1 quadrant = (DataTrace_ver1) mapResults.get("QuadrantMeasure");
                                    //Zone
                                    DataTrace_ver1 zone = (DataTrace_ver1) mapResults.get("ZoneMeasure");
                                    OrdXYData q = quadrant.get(idx);
                                    OrdXYData z = zone.get(idx);
                                    QList.add(q);
                                    ZList.add(z);
                                }
                            }
                            if (QList.size() == totalMiceNo && ZList.size() == totalMiceNo) {
                                Measures.weightedMeanandSD(QList);
                                Measures.weightedMeanandSD(ZList);
                                // writing files
                                File quad = new File(dir.getPath() + File.separator + "Quadrant_" + keyKM + i + j);
                                this.writeFile("Q" + idx + trial, QList, quad);
                                File zone = new File(dir.getPath() + File.separator + "Zone_" + keyKM + i + j);
                                this.writeFile("P" + idx + trial, ZList, zone);
                            }
                        }
                        if (j == Integer.MAX_VALUE) {
                            break;
                        }
                    }
                    if (i == Integer.MAX_VALUE) {
                        break;
                    }
                }
            }
        }

        if (!taskLog.isEmpty()) {
            JOptionPane.showMessageDialog(frame, "Task completed with the following errors:\n" + taskLog, "Task Completed with Error.", JOptionPane.WARNING_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(frame, "Task completed.\n" + taskLog, "Task Completed", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_jButtonGenerateMapsActionPerformed

    private void jButtonGeneratePlotsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonGeneratePlotsActionPerformed
        String taskLog = "";
        if (dir == null) {
            JOptionPane.showMessageDialog(frame, "Please select directory to save plots.", "ERROR", JOptionPane.ERROR_MESSAGE);
            //Select directory to store files
            JFileChooser Fc = new JFileChooser();
            Fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
            Fc.showOpenDialog(this);
            dir = Fc.getSelectedFile();
        }

        //bitset for user selection of distvmeasure plot
        BitSet bs = new BitSet(4);
        bs.set(0, jCheckBoxRDistvRVel.isSelected());
        bs.set(1, jCheckBoxRDistvRVelaP.isSelected());
        bs.set(2, jCheckBoxRDistvRVelpP.isSelected());
        bs.set(3, jCheckBoxRDistvRVelErr.isSelected());

        if (!taskLog.isEmpty()) {
            JOptionPane.showMessageDialog(frame, "Task completed with the following errors:\n" + taskLog, "Task Completed with Error.", JOptionPane.WARNING_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(frame, "Task completed.\n" + taskLog, "Task Completed", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_jButtonGeneratePlotsActionPerformed

    private void jButtonCalculateMeasuresActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCalculateMeasuresActionPerformed
        //iterate over hashmap
        Iterator<HashMap.Entry<String, Mouse>> it = dataInput.entrySet().iterator();
        while (it.hasNext()) {
            HashMap.Entry<String, Mouse> pair = it.next();
            Mouse mouse = pair.getValue();
            if (jCheckBoxVelocity.isSelected()) {
                mouse.setVelocity();
            }
            if (jCheckBoxAcceleration.isSelected()) {
                mouse.setAcceleration();
            }
            if (jCheckBoxJerk.isSelected()) {
                mouse.setJerk();
            }
        }
        //print dialog box
        JOptionPane.showMessageDialog(frame, "Measures calculated.", "Task completed", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_jButtonCalculateMeasuresActionPerformed

    public File writeFile(String s, DataTrace_ver1 data, File out) {
        try {
            //header
            FileWriter outStream = new FileWriter(out, true);
            String toWrite = s.substring(2, s.length()) + "\t" + s.substring(0, 2) + "\t";
            //file contents
            for (int idx = 0; idx < data.size(); idx++) {
                OrdXYData value = data.get(idx);
                toWrite += value.getX().doubleValue() + "\t" + value.getY().doubleValue() + "\t";
            }
            toWrite += "\n";
            outStream.write(toWrite);
            outStream.close();
        } catch (IOException e) {
            System.out.println("Exception: " + e);
        }
        return out;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(WMSoftwareGUI.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(WMSoftwareGUI.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(WMSoftwareGUI.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(WMSoftwareGUI.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new WMSoftwareGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroupPlotGroupDataBy;
    private javax.swing.JButton jButtonCalculateMeasures;
    private javax.swing.JButton jButtonGenerateMaps;
    private javax.swing.JButton jButtonGeneratePlots;
    private javax.swing.JButton jButtonReadFiles;
    private javax.swing.JButton jButtonSelectFiles;
    private javax.swing.JButton jButtonUploadFiles;
    private javax.swing.JCheckBox jCheckBoxASCIIvector;
    private javax.swing.JCheckBox jCheckBoxAcceleration;
    private javax.swing.JCheckBox jCheckBoxAlongPt;
    private javax.swing.JCheckBox jCheckBoxAverageMouseMap;
    private javax.swing.JCheckBox jCheckBoxAverageMousePlot;
    private javax.swing.JCheckBox jCheckBoxCurl;
    private javax.swing.JCheckBox jCheckBoxDivergence;
    private javax.swing.JCheckBox jCheckBoxErrVec;
    private javax.swing.JCheckBox jCheckBoxGradient;
    private javax.swing.JCheckBox jCheckBoxHeatMap;
    private javax.swing.JCheckBox jCheckBoxJerk;
    private javax.swing.JCheckBox jCheckBoxOrthoPt;
    private javax.swing.JCheckBox jCheckBoxRDistvRVel;
    private javax.swing.JCheckBox jCheckBoxRDistvRVelErr;
    private javax.swing.JCheckBox jCheckBoxRDistvRVelaP;
    private javax.swing.JCheckBox jCheckBoxRDistvRVelpP;
    private javax.swing.JCheckBox jCheckBoxVecField;
    private javax.swing.JCheckBox jCheckBoxVelocity;
    private javax.swing.JComboBox<String> jComboBoxTrialNo;
    private javax.swing.JDialog jDialog1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabelMaps;
    private javax.swing.JLabel jLabelMaps1;
    private javax.swing.JLabel jLabelMaps2;
    private javax.swing.JLabel jLabelPlots;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JProgressBar jProgressBar;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JProgressBar jProgressBar2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTableList;
    private javax.swing.JTextField jTextFieldTotalMiceNo;
    private javax.swing.JTextField jTextFieldTrials;
    private javax.swing.JTextField jTextFieldUserBin;
    // End of variables declaration//GEN-END:variables
}
